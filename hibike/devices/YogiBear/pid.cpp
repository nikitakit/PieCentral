#include <PID_v1.h>

#include "pid.h"
double PIDPos = 0;
double PIDPosKP = 0;
double PIDPosKI = 0;
double PIDPosKD = 0;

double PIDVel = 0;
double PIDVelKP = 0;
double PIDVelKI = 0;
double PIDVelKD = 0;

double pwmPID = 0; //Value that is generated by PID, if PID is disabled, this will be equal to pwmInput

PID positionControl(&pos, &pwmPID, &PIDPos, PIDPosKP, PIDPosKI, PIDPosKD, DIRECT);
PID velocityControl(&vel, &pwmPID, &PIDVel, PIDVelKP, PIDVelKI, PIDVelKD, DIRECT);

void PIDSetup() {
  positionControl.SetOutputLimits(-1, 1);
  positionControl.SetSampleTime(20);
  velocityControl.SetOutputLimits(-1, 1);
  velocityControl.SetSampleTime(20);
}

void enablePos() {
  positionControl.SetMode(AUTOMATIC);
  velocityControl.SetMode(MANUAL);
}

void enableVel() {
  positionControl.SetMode(MANUAL);
  velocityControl.SetMode(AUTOMATIC);
}

void disablePID() {
  positionControl.SetMode(MANUAL);
  velocityControl.SetMode(MANUAL);
}

void updatePosPID() {
  positionControl.SetTunings(PIDPosKP, PIDPosKI, PIDPosKD);
}

void updateVelPID() {
  velocityControl.SetTunings(PIDVelKP, PIDVelKI, PIDVelKD);
}

void posPID() {
  positionControl.Compute();
}

void velPID() {
  velocityControl.Compute();
}

void setPositionSetpoint(double x) {
  double PIDPos = x;
}

void setPositionKP(double x) {
  double PIDPosKP = x;

}

void setPositionKI(double x) {
  double PIDPosKI = x;

}

void setPositionKD(double x) {
  double PIDPosKD = x;
}

void setVelocitySetpoint(double x) {
  double PIDVel = x;

}

void setVelocityKP(double x) {
  double PIDVelKP = x;
}

void setVelocityKI(double x) {
  double PIDVelKI = x;
}

void setVelocityKD(double x) {
  double PIDVelKD = x;
}